package chapter18;

public class Main01 {

	public static void main(String[] args) {
		// 입출력 스트림
		// 입출력은 JVM기준으로 데이터가 JVM에 들어오면 입력, JVM에서 나오면 출력
		
		//  JVM에서 데이터를 입출력하기 위한 도구객체를 스트림
		
		// 어떤 데이터를 전송하는가에 따라서 두가지 스트림으로 구분
		//   - 바이트전송 스트림 : 일반데이터(문자,음악, 이미지등등..)
		//   - 문자전송 스트림 : 글자 전송에 특화
		
		// 각 스트림마다 입력 / 출력을 담당하는 두개의 클래스로 구분
		//   - 바이트전송
		//       - 입력 스트림 : inputStream
		//       - 출력 스트림 : outputStream
		//   - 문자 전송
		//       - 입력 스트림 : Reader
		//       - 출력 스트림 : Writer
		
		// 구체적인 메서드
		//  - 입력
		//    read();  1바이트를 읽는데 사용하는 메서드, 더이상 읽을 데이터가 없는 경우 -1 반환
		//    read(byte[] b);  주어진 배열 길이 만큼 바이트를 읽어서 처리
		//    read(byte[] b, int off, int len);
		//                   배열의 시작,  배열의 길이  만큼의 바이트 데이터를 처리
		//    close(); 자원 반납

		//  - 출력
		//    write();  1바이트를 출력하는데 사용하는 메서드 , 더이상 출력할 데이터가 없는 경우 -1 반환
		//    write(byte[] b); 주어진 배열 길이 만큼 바이트를 읽어서 처리
		//    write(byte[] b, int off, int len);
		//    flush();  잔류하는 데이터 비우기
		//	    close(); 자원 반납
		
//=======================================================================================
		// 보조 스트림 : 메인 스트림에 붙어서 보조해주는 역할 :  부가적인 기능을 제공하기 위한 목적
/*
 * 		1. 출력 보조 스트림 : printStream
 *       - 간단한 메서드로 출력을 쉽게 할수 있도록 도와주는 스트림
 *       - print(), println(), printf()
 *       - printf("구멍1~~구멍2~~구멍3",데이터1,데이터2,데이터3);
 * 
 * 		2.  성능 향상을 위한 보조스트림 : bufferedInputStream / bufferedOutputStream 
 * 		 - 입출력 스트림 사용시 중간 메모리 버퍼를 사용함으로 써 입출력 성능 향상에 도움을 주는 스트림
 * 
 * 		3. 기본타입 입출력을 도와주는 보조스트림 : DataInputStream / DataOutputStream
 * 		 -  자바는 기본 바이트 단위로만 입출력을 하므로 기본타입 제어가 어렵다.
 * 		 - 메서드를 통해서 기본타입의 데이터를 변환해줌으로 기본타입데이터를 입출력할수 있게 도와주는 스트림
 * 
 * 		 - 기록 순서와 같은 순서로 읽어와야 오류가 발생하지 않는다.,
 *          [저장] int-> float -> String
 *          [불러오기] int-> float -> String
 * 
 * 		4. 메모리에 존재하는 인스턴스를 입출력하기 위한 보조스트림 : ObjectinputStream / OnjectOutputStream
 * 		 - 메모리상에 존재하는 인스턴스를 바이트형식의 데이터로 입출력할수 있다
 * 		 -                        => 직렬화 
 * 
 * 		 - 아무인스턴스나 직렬화 할수 없고  Serializable 인터페이스를 구현한 객체만 직렬화 가능
 * 		 
 *       - 직렬화 불가능한 필드
 *          - static 필드 
 *          - Serializable 인터페이스를 구현하지 않은 클래스를 타입으로 가지는 필드
 *          - transient 제어자가 붙어있는 필드
 */
		
		
		
		
		
		

	}

}













